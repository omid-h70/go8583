// HexPair.cpp

//#include "StdAfx.h"
//#include "Macro.h"
#include "string.h"
#include "HexPair.h"

static uint8_t	g_tDecHexTableL[]	=
{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0D,
	0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
	0x0F, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
	0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
	0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

static uint8_t	g_tDecHexTableH[]	=
{
	0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xD0,
	0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0,
	0xF0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0,
	0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0,
	0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0
};

static uint8_t	g_tHexDecTable[]	=
{
	0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x30, 0x33, 0x30, 0x34, 0x30, 0x35, 0x30, 0x36, 0x30, 0x37, 0x30, 0x38, 0x30, 0x39, 0x30, 0x41, 0x30, 0x42, 0x30, 0x43, 0x30, 0x44, 0x30, 0x45, 0x30, 0x46,
	0x31, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x31, 0x34, 0x31, 0x35, 0x31, 0x36, 0x31, 0x37, 0x31, 0x38, 0x31, 0x39, 0x31, 0x41, 0x31, 0x42, 0x31, 0x43, 0x31, 0x44, 0x31, 0x45, 0x31, 0x46,
	0x32, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x34, 0x32, 0x35, 0x32, 0x36, 0x32, 0x37, 0x32, 0x38, 0x32, 0x39, 0x32, 0x41, 0x32, 0x42, 0x32, 0x43, 0x32, 0x44, 0x32, 0x45, 0x32, 0x46,
	0x33, 0x30, 0x33, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x33, 0x36, 0x33, 0x37, 0x33, 0x38, 0x33, 0x39, 0x33, 0x41, 0x33, 0x42, 0x33, 0x43, 0x33, 0x44, 0x33, 0x45, 0x33, 0x46,
	0x34, 0x30, 0x34, 0x31, 0x34, 0x32, 0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x36, 0x34, 0x37, 0x34, 0x38, 0x34, 0x39, 0x34, 0x41, 0x34, 0x42, 0x34, 0x43, 0x34, 0x44, 0x34, 0x45, 0x34, 0x46,
	0x35, 0x30, 0x35, 0x31, 0x35, 0x32, 0x35, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x35, 0x38, 0x35, 0x39, 0x35, 0x41, 0x35, 0x42, 0x35, 0x43, 0x35, 0x44, 0x35, 0x45, 0x35, 0x46,
	0x36, 0x30, 0x36, 0x31, 0x36, 0x32, 0x36, 0x33, 0x36, 0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x38, 0x36, 0x39, 0x36, 0x41, 0x36, 0x42, 0x36, 0x43, 0x36, 0x44, 0x36, 0x45, 0x36, 0x46,
	0x37, 0x30, 0x37, 0x31, 0x37, 0x32, 0x37, 0x33, 0x37, 0x34, 0x37, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x37, 0x41, 0x37, 0x42, 0x37, 0x43, 0x37, 0x44, 0x37, 0x45, 0x37, 0x46,
	0x38, 0x30, 0x38, 0x31, 0x38, 0x32, 0x38, 0x33, 0x38, 0x34, 0x38, 0x35, 0x38, 0x36, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x41, 0x38, 0x42, 0x38, 0x43, 0x38, 0x44, 0x38, 0x45, 0x38, 0x46,
	0x39, 0x30, 0x39, 0x31, 0x39, 0x32, 0x39, 0x33, 0x39, 0x34, 0x39, 0x35, 0x39, 0x36, 0x39, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x41, 0x39, 0x42, 0x39, 0x43, 0x39, 0x44, 0x39, 0x45, 0x39, 0x46,
	0x41, 0x30, 0x41, 0x31, 0x41, 0x32, 0x41, 0x33, 0x41, 0x34, 0x41, 0x35, 0x41, 0x36, 0x41, 0x37, 0x41, 0x38, 0x41, 0x39, 0x41, 0x41, 0x41, 0x42, 0x41, 0x43, 0x41, 0x44, 0x41, 0x45, 0x41, 0x46,
	0x42, 0x30, 0x42, 0x31, 0x42, 0x32, 0x42, 0x33, 0x42, 0x34, 0x42, 0x35, 0x42, 0x36, 0x42, 0x37, 0x42, 0x38, 0x42, 0x39, 0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x42, 0x45, 0x42, 0x46,
	0x43, 0x30, 0x43, 0x31, 0x43, 0x32, 0x43, 0x33, 0x43, 0x34, 0x43, 0x35, 0x43, 0x36, 0x43, 0x37, 0x43, 0x38, 0x43, 0x39, 0x43, 0x41, 0x43, 0x42, 0x43, 0x43, 0x43, 0x44, 0x43, 0x45, 0x43, 0x46,
	0x44, 0x30, 0x44, 0x31, 0x44, 0x32, 0x44, 0x33, 0x44, 0x34, 0x44, 0x35, 0x44, 0x36, 0x44, 0x37, 0x44, 0x38, 0x44, 0x39, 0x44, 0x41, 0x44, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 0x46,
	0x45, 0x30, 0x45, 0x31, 0x45, 0x32, 0x45, 0x33, 0x45, 0x34, 0x45, 0x35, 0x45, 0x36, 0x45, 0x37, 0x45, 0x38, 0x45, 0x39, 0x45, 0x41, 0x45, 0x42, 0x45, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 0x46,
	0x46, 0x30, 0x46, 0x31, 0x46, 0x32, 0x46, 0x33, 0x46, 0x34, 0x46, 0x35, 0x46, 0x36, 0x46, 0x37, 0x46, 0x38, 0x46, 0x39, 0x46, 0x41, 0x46, 0x42, 0x46, 0x43, 0x46, 0x44, 0x46, 0x45, 0x46, 0x46
};

int HexPairToStringEx(char* dest, char* src, int src_len)
{
	int i;
	for (i = 0; i < src_len; i++) {
		sprintf(dest + i * 2, "%02X", (unsigned char) src[i]);
	}
	dest[i * 2] = 0;

	return TRUE;
}

BOOL HexPairToString(uint8_t* pData, uint uDataSize, uint8_t* pString, uint* puStringSize)
{
	if (((uDataSize << 1) + 1) > (*puStringSize))
	{
		memset(pString, 0, (*puStringSize));
		return FALSE;
	}

	for (uint i = 0; i < uDataSize; i++)
	{
		pString[(i << 1) + 0]	= g_tHexDecTable[(pData[i] << 1) + 0];
		pString[(i << 1) + 1]	= g_tHexDecTable[(pData[i] << 1) + 1];
	}

	pString[uDataSize << 1]	= 0x00;
	(*puStringSize)			= (uDataSize << 1);

	return TRUE;
}

BOOL StringToHexPair(uint8_t* pString, uint uLength, uint8_t* pData, uint* puSize)
{
	if (uLength & 0x01)
	{
		uLength	-= 1;
	}

	if (uLength > ((*puSize) << 1))
	{
		return FALSE;
	}

	(*puSize) = (uLength >> 1);

    for (uint i = 0; i < uLength; i += 2)
	{
		pData[i >> 1]	=  (g_tDecHexTableH[pString[i] - 0x30] | g_tDecHexTableL[pString[i + 1] - 0x30]);
	}

	return TRUE;
}

BOOL StringToHexPair1(uint8_t* pString, uint uLength)
{
	uint8_t	cBuffer[256];
	uint	uSize	= 256;

	memset(cBuffer, 0, 256);

	if (StringToHexPair(pString, uLength, cBuffer, &uSize))
	{
		memcpy(pString, cBuffer, uSize);
		return TRUE;
	}

	return FALSE;
}

